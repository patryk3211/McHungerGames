plugins {
    id 'java'
}

group = 'org.patryk3211'
version = '1.1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

configurations {
    shade
    implementation.extendsFrom(shade)
    compile.extendsFrom(shade)
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT"

    shade "org.nanohttpd:nanohttpd-nanolets:2.3.1"
    shade "org.nanohttpd:nanohttpd-websocket:2.3.1"
}

task httpRun(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main "org.patryk3211.hungergames.http.RunHttpFrontend"
    dependencies {
        implementation "org.nanohttpd:nanohttpd-nanolets:2.3.1"

        implementation "org.slf4j:slf4j-api:2.0.9"
        implementation "com.google.code.gson:gson:2.10.1"
        runtimeOnly "org.slf4j:slf4j-simple:2.0.9"
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**', 'LICENSE.txt'
        }
    }
}
